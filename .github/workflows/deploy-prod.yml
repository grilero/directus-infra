name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          extensions/*/package-lock.json
          scripts/package-lock.json

    - name: Build Extensions
      run: |
        # Build AI Questions Review Layout (if exists)
        if [ -d "extensions/directus-extension-layout-review-ai-questions" ]; then
          cd extensions/directus-extension-layout-review-ai-questions
          npm ci
          npm run build
          cd ../..
        fi
        
        # Build Search Chapters Interface
        if [ -d "extensions/directus-extension-interface-search-chapters" ]; then
          cd extensions/directus-extension-interface-search-chapters
          npm ci
          npm run build
          cd ../..
        fi

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Production Server
      run: |
        # Copy files to server
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.env*' \
          --exclude='certbot/conf' \
          --exclude='uploads' \
          ./ ${{ secrets.USER }}@${{ secrets.HOST }}:~/directus-infra/

    - name: Create environment file on server
      run: |
        ssh ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
          cd ~/directus-infra
          cat > .env.prod << 'ENVEOF'
        KEY=${{ secrets.DIRECTUS_KEY }}
        SECRET=${{ secrets.DIRECTUS_SECRET }}
        ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
        PUBLIC_URL=${{ secrets.PUBLIC_URL }}
        DB_CLIENT=pg
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=5432
        DB_DATABASE=postgres
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_SSL__REJECT_UNAUTHORIZED=false
        STORAGE_LOCATIONS=supabase
        STORAGE_SUPABASE_DRIVER=supabase
        STORAGE_SUPABASE_PROJECT_URL=${{ secrets.SUPABASE_PROJECT_URL }}
        STORAGE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        STORAGE_SUPABASE_BUCKET=directus-files
        EXTENSIONS_PATH=./extensions
        EXTENSIONS_AUTO_RELOAD=false
        WEBSOCKETS_ENABLED=true
        NODE_ENV=production
        LOG_LEVEL=warn
        CACHE_ENABLED=true
        CORS_ENABLED=true
        CORS_ORIGIN=https://grile.ro
        RATE_LIMITER_ENABLED=true
        ACCESS_TOKEN_TTL=15m
        REFRESH_TOKEN_TTL=7d
        REFRESH_TOKEN_COOKIE_SECURE=true
        REFRESH_TOKEN_COOKIE_SAME_SITE=strict
        ENVEOF
        EOF

    - name: Setup SSL Certificates (First Time)
      run: |
        ssh ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
          cd ~/directus-infra
          
          # Check if certificates already exist for production domain
          if [ ! -d "certbot/conf/live/content.grile.ro" ]; then
            echo "üîê Setting up SSL certificates for first time..."
            
            # Make init script executable
            chmod +x init-letsencrypt.sh
            
            # Run SSL certificate setup
            ./init-letsencrypt.sh
            
            echo "‚úÖ SSL certificates initialized"
          else
            echo "‚úÖ SSL certificates already exist"
          fi
        EOF

    - name: Deploy with zero downtime and bootstrap
      run: |
        ssh ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
          cd ~/directus-infra
          
          # Check if this is first deployment (no prod containers running)
          FIRST_DEPLOY=false
          if ! docker-compose -f docker-compose.prod.yml ps directus | grep -q "Up"; then
            FIRST_DEPLOY=true
            echo "üöÄ First time production deployment detected - will run bootstrap"
          fi
          
          # Pull latest Directus image
          docker-compose -f docker-compose.prod.yml pull directus
          
          # Start services
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for Directus to be healthy
          echo "‚è≥ Waiting for Directus to be healthy..."
          timeout 120 bash -c 'until docker-compose -f docker-compose.prod.yml ps directus | grep -q "healthy"; do sleep 5; echo "Still waiting..."; done'
          
          # Run bootstrap if first deployment
          if [ "$FIRST_DEPLOY" = true ]; then
            echo "üîÑ Running production bootstrap process..."
            
            # Wait a bit more for Directus to be fully ready
            sleep 10
            
            # Run Directus bootstrap
            docker-compose -f docker-compose.prod.yml exec -T directus npx directus bootstrap || echo "Bootstrap command completed"
            
            # Apply database schema (if using Supabase migrations)
            if [ -f "supabase/migrations/20250725000001_complete_schema.sql" ]; then
              echo "üìä Applying database schema..."
              # Note: You'll need to run this manually or via Supabase CLI
              echo "Run manually: psql 'your-prod-connection-string' -f supabase/migrations/20250725000001_complete_schema.sql"
            fi
            
            # Add metadata (if Node.js is available)
            if command -v node >/dev/null 2>&1; then
              cd scripts
              npm install --silent 2>/dev/null || true
              SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_PROJECT_REF }} node remote-bootstrap.js production || echo "Metadata setup completed"
              cd ..
            fi
            
            echo "‚úÖ Production bootstrap process completed"
          fi
          
          # Clean up old images
          docker image prune -f
        EOF

    - name: Verify deployment
      run: |
        # Check if service is responding
        sleep 10
        curl -f ${{ secrets.PUBLIC_URL }}/server/health || exit 1
        echo "‚úÖ Production deployment successful!"

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        # Add notification logic here (Slack, Discord, etc.)